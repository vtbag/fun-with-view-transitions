/* Due to th star selector this targets all group animations.
 * Due to the default inheritance, it also trickles down the tree 
 * to the entry and exit animations of the old and new pseudo elements.
 */
::view-transition-group(*) {
  animation-duration: 1s;
}

/* To keep unnamed buttons interactive, 
 * remove root group and allow clicks to go through the view transition layer.
 * Also do not distract by clicks selecting text */
:root {
  view-transition-name: none;
  user-select: none;
}
::view-transition {
  pointer-events: none;
}

/** Moving the disks **/
/*  When animating the "next" move, name the disks */
:active-view-transition-type(move) {
  /* participants: disks, their name being set by JavaScript */
  /* reducing animations: we won't have entry or exit animations for the disks */
  &::view-transition-old(.disk),
  &::view-transition-new(.disk) {
    animation-name: none;
  }
  /* we do not even need old images. */
  &::view-transition-old(.disk) {
    display: none;
  }

  &::view-transition-group(disk-1) {
    animation-delay: 0ms;
  }
  &::view-transition-group(disk-2) {
    animation-delay: 20ms;
  }
  &::view-transition-group(disk-3) {
    animation-delay: 40ms;
  }
  &::view-transition-group(disk-4) {
    animation-delay: 60ms;
  }
  &::view-transition-group(disk-5) {
    animation-delay: 80ms;
  }
  &::view-transition-group(disk-6) {
    animation-delay: 100ms;
  }
}

/** moving with vectors **/
:active-view-transition-type(lift-and-shift) {
  /* if set, always together with move, see above */
  &::view-transition-image-pair(.disk) {
    animation-timing-function: inherit;
    animation-name: lift-and-shift;
  }
}

@keyframes lift-and-shift {
  15%,
  85% {
    transform: translateY(
      calc(
        -1 * min(170px, abs(var(--vtbag-vector-from-x, 0) -
                var(--vtbag-vector-to-x, 0)))
      )
    );
  }
}
@media (orientation: portrait) {
  @keyframes lift-and-shift {
    100% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(
        calc((var(--vtbag-vector-from-y, 0) - var(--vtbag-vector-to-y, 0)) / 3)
      );
    }
  }
}

/** updating the progress bar **/
:active-view-transition-type(progress) {
  /* participants: current step, progress bar */
  #currentStep {
    view-transition-name: step;
  }
  #progress-bar {
    view-transition-name: bar;
  }
  /* stack the old image above the (wider) new image */
  &::view-transition-old(bar),
  &::view-transition-new(bar) {
    animation-name: none;
    mix-blend-mode: soft-light;
  }
  /* no entry or exit animations */
  &::view-transition-new(step),
  &::view-transition-old(step) {
    animation-name: none;
    height: 100%;
    width: auto;
  }
  /* simple css transform to lift the old (immutable) current step counter
     above the (dynamically changing) new one */
  &::view-transition-old(step) {
    opacity: 0.66;
    transform: translateY(-1rem);
    transition: transform 0.5s;
    @starting-style {
      transform: translateY(0);
    }
  }
}

/** Changing from and to the "with vectors" mode **/
/*  We use different timings entering and exiting this mode */
:active-view-transition-type(mode-toggle) {
  /* additional participants: select, game board, completion message, reset buttons */
  #viewTransitions {
    view-transition-name: select;
  }
  #selectFrame {
    view-transition-name: selectFrame;
  }
  &::view-transition-group(selectFrame) {
    z-index: 1;
  }
  &::view-transition-image-pair(select) {
    overflow: clip;
    perspective: 50cm;
  }
  &::view-transition-old(select) {
    transform-origin: center center calc(var(--vtbag-vector-from-width) * -0.5);
    animation-name: rotate-out;
    animation-timing-function: ease-in-out;
  }
  &::view-transition-new(select) {
    transform-origin: center center calc(var(--vtbag-vector-from-width) * -0.5);
    animation-name: rotate-in;
    animation-timing-function: ease-in-out;
  }
}
@keyframes rotate-out {
  0% {
    transform: rotateY(0);
  }
  25% {
    transform: rotateY(-90deg);
  }
  50%,
  100% {
    transform: rotateY(-180deg);
  }
}
@keyframes rotate-in {
  0% {
    transform: rotateY(180deg);
    z-index: -1;
  }
  25% {
    transform: rotateY(90deg);
  }
  50%,
  100% {
    transform: rotateY(0deg);
    z-index: 1;
  }
}

:active-view-transition-type(board-move) {
  #gameBoard {
    view-transition-name: board;
    view-transition-class: solid;
  }
  #completionMessage {
    view-transition-class: solid;
    view-transition-name: message;
  }
  #reset,
  #playAgain {
    view-transition-class: solid;
    view-transition-name: reset;
    background-color: var(--color-border);
    cursor: not-allowed;
  }
  &::view-transition-old(.solid),
  &::view-transition-new(.solid) {
    animation-name: none;
  }
  &::view-transition-old(.solid) {
    display: none;
  }

  /* some example of different timing functions 
     when switching from and to vectors */
  &::view-transition-group(.disk) {
    animation-timing-function: ease;
  }
  &::view-transition-group(message) {
    animation-timing-function: linear;
  }
  &::view-transition-group(board) {
    animation-timing-function: ease-in-out;
  }
  &::view-transition-group(reset) {
    animation-timing-function: linear(
      0 0%,
      -0.1 12.5% 0 25%,
      1 75%,
      1.1 87.5%,
      1 100%
    );
  }
  /* override timings when switching to vectors */
  &.vectors {
    &::view-transition-group(.disk) {
      animation-timing-function: ease-in-out;
    }
    &::view-transition-group(board) {
      animation-timing-function: ease;
    }
  }
}
/** Resetting the game **/
:active-view-transition-type(reset) {
  /* participants: completion message, reset buttons */
  #completionMessage {
    view-transition-name: message;
  }
  /* two different reset buttons with the same name because they are exclusive. */
  #reset,
  #playAgain {
    view-transition-name: reset;
  }
  /* view-transition pseudo elements are not interactive.
     Give the buttons a "disabled" look during view transitions */
  #reset,
  #playAgain {
    background-color: var(--color-border);
    cursor: not-allowed;
  }
  /* let the message stay behind reset buttons */
  &::view-transition-group(message) {
    z-index: -1;
  }
  /* message entry animation */
  &::view-transition-new(message):only-child {
    animation-name: message-in;
  }
  /* message exit animation */
  &::view-transition-old(message):only-child {
    animation-name: message-out;
  }
  /* aspect ratio correction for the reset buttons */
  &::view-transition-old(reset),
  &::view-transition-new(reset) {
    width: 100%;
    height: 100%;
  }
}

@keyframes message-out {
  to {
    opacity: 0;
    transform: translateY(20px);
  }
}
@keyframes message-in {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
}

/** Toggle between light and dark theme **/
:active-view-transition-type(theme-toggle) {
  /* participants: viewport, game board, disks */
  /* cross-fade the whole viewport */
  view-transition-name: root;

  /* enable game board animations */
  #gameBoard {
    view-transition-name: board;
  }
  /* push the root group into the background */
  &::view-transition-group(root) {
    z-index: -2;
  }
  /* move the board to the foreground */
  &::view-transition-group(board) {
    animation-name: popup;
  }
  /* enable 3D */
  &::view-transition-image-pair(board) {
    perspective: 50cm;
  }
  /* rotate the board out and in again */
  &::view-transition-old(board),
  &::view-transition-new(board) {
    animation-name: turn-out;
    outline: 3pt solid var(--color-primary-hover);
    border-radius: 16px;
    animation-timing-function: ease-in;
  }
  &::view-transition-new(board) {
    animation-name: turn-in;
  }
}
@keyframes popup {
  33%,
  80% {
    z-index: 1;
  }
}

@keyframes turn-out {
  20% {
    transform: translateZ(15cm);
  }
  50%,
  100% {
    transform: translateZ(15cm) rotateY(90deg);
  }
}
@keyframes turn-in {
  0%,
  50% {
    transform: translateZ(15cm) rotateY(-90deg);
  }
  80% {
    transform: translateZ(15cm);
  }
  100% {
    transform: translateZ(0);
    outline-width: 0;
  }
}

@media (orientation: portrait) {
  @keyframes turn-out {
    50%,
    100% {
      transform: rotateY(90deg);
    }
  }

  @keyframes turn-in {
    0%,
    50% {
      transform: rotateY(-90deg);
    }
    100% {
      outline-width: 0;
    }
  }
}

/*** portrait mode ***/
@media (orientation: portrait) {
  :active-view-transition-type(theme-toggle) {
    /* do not move the board to the foreground */
    &::view-transition-group(board) {
      animation-name: none;
    }
    &::view-transition-image-pair(.disk) {
      animation-name: lift;
    }
    /* staggered lift movement */
    &::view-transition-image-pair(disk-1) {
      animation-delay: 0ms;
    }
    &::view-transition-image-pair(disk-2) {
      animation-delay: 50ms;
    }
    &::view-transition-image-pair(disk-3) {
      animation-delay: 100ms;
    }
    &::view-transition-image-pair(disk-4) {
      animation-delay: 150ms;
    }
    &::view-transition-image-pair(disk-5) {
      animation-delay: 200ms;
    }
    &::view-transition-image-pair(disk-6) {
      animation-delay: 250ms;
    }
  }

  @keyframes lift {
    25%,
    75% {
      transform: translateY(-20px);
    }
  }
}
